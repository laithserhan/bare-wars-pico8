pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- bare wars
-- by john weachock

-- https://github.com/clowerweb/Lib-Pico8/blob/9580f8afd84dfa3f33e0c9c9131a595ede1f0a2a/distance.lua
function dst(o1, o2)
 return sqrt(sqr(o1.x - o2.x) + sqr(o1.y - o2.y))
end

function sqr(x) return x * x end

-- mine: tile distance
function tdst(o1, o2)
 return sqrt(sqr(o1.x/8 - o2.x/8) + sqr(o1.y/8 - o2.y/8))
end

-- mine: manhattan distance
function mdst(o1, o2)
  return abs(o1.x - o2.x) + abs(o1.y - o2.y)
end

-- https://github.com/eevee/klinklang/blob/23c5715bda87f3c787e1c5fe78f30443c7bf3f56/object.lua (modified since)
local object = {}
object.__index = object


-- constructor
function object:__call(...)
  local this = setmetatable({}, self)
  return this, this:init(...)
end


-- methods
function object:init()
end

function object:update()
end

function object:draw()
end


-- subclassing
function object:extend(proto)
  proto = proto or {}

  -- copy meta values, since lua doesn't walk the prototype chain to find them
  for k, v in pairs(self) do
    if sub(k, 1, 2) == "__" then
      proto[k] = v
    end
  end

  proto.__index = proto
  proto.__super = self

  return setmetatable(proto, self)
end


-- implementing mixins
function object:implement(...)
  for _, mixin in pairs{...} do
    for k, v in pairs(mixin) do
      if self[k] == nil and type(v) == "function" then
        self[k] = v
      end
    end
  end
end


-- typechecking
function object:isa(class)
  local meta = getmetatable(self)
  while meta do
    if meta == class then
      return true
    end
    meta = getmetatable(meta)
  end
  return false
end

-- camera object
local _camera = object:extend()

function _camera:init()
  self.x = 0
  self.y = 0
  self.tx = 0
  self.ty = 0
end

function _camera:move(x, y)
  self.tx = x
  self.ty = y
end

function _camera:dmove(dx, dy)
  self.tx += dx
  self.ty += dy
end

function _camera:update()
  if (self.x <= self.tx - 1) or (self.x >= self.tx + 1) then
    self.x = (self.x + self.tx) / 2
  end
  if (self.y <= self.ty - 1) or (self.y >= self.ty + 1) then
    self.y = (self.y + self.ty) / 2
  end
end

function _camera:draw()
  camera(self.x, self.y)
end

-- sprite object
local _sprite = object:extend()

function _sprite:init(tile, x, y, transparent)
  self.tile = tile
  self.x = x
  self.y = y
  self.transparent = transparent or 8
  self.flipx = false
  self.flipy = false
  self.w = 1
  self.h = 1
end

function _sprite:update()
  local tile = self.tile
  if type(tile) == "table" then
    tile:update()
  end
end

function _sprite:draw()
  palt(self.transparent, true)
  palt(0, false)

  local tile = self.tile

  if type(tile) == "table" then
    tile = tile:frame()
  end

  spr(tile, self.x, self.y, self.w, self.h, self.flipx, self.flipy)
  palt()
end

function _sprite:move(x, y)
  self.x = x
  self.y = y
end

function _sprite:dmove(dx, dy)
  self.x += dx
  self.y += dy
end

-- anim object
local _anim = object:extend()

function _anim:init(frames, speed, loop, reverse)
  self.step = 0
  self.cur = 1
  self.frames = frames
  self.loop = loop or true
  self.reverse = reverse or false
  self.speed = speed or 30
end

function _anim:next()
  if self.reverse then
    self.cur -= 1
    if self.cur == 0 then
      if self.loop then
        self.cur = #self.frames
      else
        self.cur = 1
      end
    end
  else
    self.cur += 1
    if self.cur == #self.frames + 1 then
      if self.loop then
        self.cur = 1
      else
        self.cur = #self.frames
      end
    end
  end

  return self.frames[self.cur]
end

function _anim:update()
  self.step += 1
  if self.step % flr(30 / self.speed) == 0 then
    self:next()
  end

  return self.frames[self.cur]
end

function _anim:frame()
  return self.frames[self.cur]
end

-- button enum
local b = {left=0, right=1, up=2, down=3, o=4, x=5}
local c = {
  black=0, darkblue=1, darkpurple=2, darkgreen=3,
  brown=4, darkgrey=5, lightgrey=6, white=7,
  red=8, orange=9, yellow=10, green=11,
  blue=12, indigo=13, pink=14, peach=15,
}

local ui = {}
local units = {}

local cam = _camera()
local curs = _sprite(_anim({1, 2, 3, 4}, 10), 64, 64, c.red)

add(ui, curs)

local bear1 = _sprite(_anim({5, 6, 5, 7}, 10), 16, 16, c.red)
local bear2 = _sprite(37, 16 + 36 * 8, 24, c.red)
local bear3 = _sprite(21, 16 + 36 * 16, 32, c.red)

add(units, bear1)
add(units, bear2)
add(units, bear3)

local btns = {[0]=false, [1]=false, [2]=false, [3]=false, [4]=false, [5]=false}
local pbtns = btns

-- move the cursor to the closest unit (by manhattan distance, because pythag overflows)
function jump_to_closest_unit()
  local closest_unit = units[1]
  local closest_dist = mdst(units[1], curs)

  for unit in all(units) do
    local unit_dist = mdst(unit, curs)

    -- check if this unit is closer
    if unit_dist < closest_dist or use_next then
      closest_dist = unit_dist
      closest_unit = unit
    end

    -- if we're currently selecting a unit, then move to the next instead
    if closest_dist == 0 then
      jump_to_next_unit()
      return
    end
  end

  -- move cursor to unit
  curs.x = closest_unit.x
  curs.y = closest_unit.y
  sfx(0)
end

-- move the cursor to the next unit (undefined behavior if no unit is under the cursor)
function jump_to_next_unit()
  local i = 0
  for unit in all(units) do
    local unit_dist = mdst(unit, curs)
    i += 1

    if unit_dist == 0 then
      break
    end
  end

  -- decide the next unit
  local unit = units[i + 1]
  if i == #units then
    unit = units[1]
  end

  -- move cursor to unit
  curs.x = unit.x
  curs.y = unit.y
  sfx(0)
end

-- move the cursor to the previous unit (undefined behavior if no unit is under the cursor)
function jump_to_prev_unit()
  -- find the unit we're selecting
  local i = 0
  for unit in all(units) do
    local unit_dist = mdst(unit, curs)
    i += 1

    if unit_dist == 0 then
      break
    end
  end

  -- decide the previous unit
  local unit = units[i - 1]
  if i == 1 then
    unit = units[#units]
  end

  -- move cursor to unit
  curs.x = unit.x
  curs.y = unit.y
  sfx(0)
end

function _init()
end

function _update()
  pbtns = btns
  btns = {[0]=btn(0), [1]=btn(1), [2]=btn(2), [3]=btn(3), [4]=btn(4), [5]=btn(5)}

  cam:move(curs.x - 60, curs.y - 60)
  cam:update()

  for sprite in all(units) do
    sprite:update()
  end

  for sprite in all(ui) do
    sprite:update()
  end

  if btnp(b.left) then
    if btns[b.o] then
      jump_to_prev_unit()
    else
      curs:dmove(-8, 0)
    end
  end
  if btnp(b.right) then
    if btns[b.o] then
      jump_to_next_unit()
    else
      curs:dmove(8, 0)
    end
  end
  if btnp(b.up) then curs:dmove(0, -8) end
  if btnp(b.down) then curs:dmove(0, 8) end
  if not pbtns[b.o] and btns[b.o] then
    jump_to_closest_unit()
  end
  if btnp(b.x) then curs:dmove(-36 * 8, 0) end
end

function _draw()
  cls()

  cam:draw()
  map(0, 0)

  for sprite in all(units) do
    sprite:draw()
  end

  for sprite in all(ui) do
    sprite:draw()
  end
end

__gfx__
00000000875087500875087550875087750875088944449889444498894444983333333300000000000000000000000000000000000000000000000000000000
00000000088888885888888078888885888888878444444884444448844444483333333300000000000000000000000000000000000000000000000000000000
00700700588888877888888888888880088888858404404844044048840440443333333300000000000000000000000000000000000000000000000000000000
00077000788888858888888708888888588888804444044444440448844404443333333300000000000000000000000000000000000000000000000000000000
00077000888888800888888558888887788888884444444484444444444444483333333300000000000000000000000000000000000000000000000000000000
00700700088888885888888078888885888888878449944884499444444994483333333300000000000000000000000000000000000000000000000000000000
00000000588888877888888888888880088888858449944884499448844994483333333300000000000000000000000000000000000000000000000000000000
00000000780578058057805705780578578057808448844884488888888884483333333300000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008677776800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008777777800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008707707800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000007777077700000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000007777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008776677800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008776677800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008778877800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008511115800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008111111800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008101101800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000001111011100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000001111111100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008115511800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008115511800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008118811800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
3333333333bb333333bbbb3333344333333bb3333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
3333333333b333b33b2b2bb33344443333bbbb333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
3333333333333bb33bbbb2b33399993333bbbb333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
333333333b3333333b2bbbb3334444333bbbbbb33333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
333333333bb33b3333bb2b3333999933333443333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
3333333333333bb3333bb33333444433333443333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
33333333333333333333333333333333333333333333333333333333333333330000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
dddddddddddd5ddddddccddddddccddddddddddddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
dddddddddd5dddddddccccddddc7ccddddd5dddddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
ddddddddddddd5ddddcc1ccdddcc7cdddd555ddddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
ddddddddd5dddddddcc111cddd7cc7dddd5555dddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
dddddddddddd5ddddcc11cddddc7ccddd555555ddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
dddddddddd5ddd5dddccccdddddc7dddd555555ddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
44444444444444444444444444444444444444444444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
444444444494494444bbe44444444444443333444444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
444444444949449444ebb4e444455444433333344444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
4444444444444944444b44be447ee744433333344444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
44444444444944444bbb4bb4447ee744443333444444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
44444444449449444e4bbb44447ee744444554444444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
44444444444944944444b44444777744444554444444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
44444444444444444444444444444444444444444444444444444444444444440000000000000000000000000000000000000000000000000000000000000000
__map__
4040404040404040404040404040404040404040404040404040404040404040404040404060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040404040404060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404041404040414040404040434040404040404040424040404040404060606060606060606060606061606060606060606060606060606060606060606064606050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404440404040404040404040404060606060606260606060606060606060606060606360606060606060606060606060606050505050505050505050505050505450505050505050505050505054505050505050505000000000000000000000000000000000000000
4040404140404040414040404040404040404040404040404040404040404040404040404060606060606060606060606060606060606060606060606060616060606060606060606050505050515050505050505050505050505250505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404140404040404040404041404040404060606060606060606060606060606060606060606060606060606060636060606060606050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040404040404060606060606060606064606060606060606060606060606060646060606060606060606050505050505050505053505051505050505050505150505050505050505050505050505000000000000000000000000000000000000000
4040404040414040404440404041404040404040404040404040404040404040404040404060606060606061606060606060636060606061606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505050515050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040414040404040404040404060606060606060606060606060606060606060606060606060606060606060606064606050505050505250505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404042404040404040444040404040404040404040404060606060606060606060606060606060606060606060606260606061606060606060606050505050505050505050505052505050505050505050505350505050505050505050505000000000000000000000000000000000000000
4040404340404040404040404040404040404040404040404040404040404040404040404060606060606060606060606160606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505450505050505050505000000000000000000000000000000000000000
4040404040404040404042404040404040404040414040404040404040404040424040404060606060626060606060606060606060606060636060606060606060606060606060606050505050505054505050505050505050545050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040444040404040404043404040404140404040404040404060606060606060606060606060606062606060606060606060606060606064606060606050505050505050505050505050505050535050505051505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040404040404060606060606060606060646060606060606060606060616060606060606060606060606050505050505050505050505150505050505050505050505050505050505050525050505000000000000000000000000000000000000000
4040404040414040404040404040404040404040404040404040404040404040404040404060606060606060636060606060606060606060606060606060606062606060606060606050505050525050505050505050505050505050505050505050505350505050505050505000000000000000000000000000000000000000
4040404040404040404041404040404041404040404040404040404040404040404040404060606060606060606060606060616060646060606060606060606060606060606060606050505050505050545050505050505050505250505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404044404040404040404040434040404060606060606060606060616060606060606060606060606360606060606060606060606050505050505050505050505050505050505050505050505050505050505054505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040404040404060606060606060606060606060606060606060606060606060606060606060616060606050505050505050505050505050535050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404340404040404040404040404040404040404040404040424040404041404040404060606060616060606060606060606060606061606060606060606060606060606060606050505050505050515050505050505050505050545050505051505050505050505050505000000000000000000000000000000000000000
4040404040404040404044404040414040404043404040404040404040404040404040404060606060606060606060606460606060606060606060606060606260606060606060606050505050505050505050505050505050505050505050505050505050525050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040404040404060606060606060606060606060606063606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404140404040404040404040404040404040404040404040404040404040404060606060606060626060606060606060606060606060616060606060606360646060606050505050505050505050505050515050505050505050505350505050505050515050505000000000000000000000000000000000000000
4040404040404040404042404040404040404040404140404040404044404040404040404060606060606060606060606060606060606060606060606060606060606060606060606050505050505052505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404044404040404040404040404040404040404040404060606060606060606060616060606060646060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040404040404060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505050505050505000000000000000000000000000000000000000
__sfx__
00010000260500500030050300503005030040300403003030030300202d0003a6003a6002f0003960038600386003860038600386002e0002d0002a00028000210001d000190001600013000000000000000000
